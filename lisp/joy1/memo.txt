¬、∨、∧、⇒、≡、(∀ x)、(∃ x)を関数として作って、(eval wff)で同じことができないか

・論理演算子の機能として、式の変形(CNF化)を記述できないか


2022/08/21 各ステップで関数を切り替えたいので、
 (let ((f1 (lambda (x) (list x)))) (apply f1 '(12)))
で一時的に関数定義をかえられる。

論理演算子の意味では実行することはないので、これでいけるのではないか、

((∀ x) (P x))だと(∀ x)が関数になる必要があるので、(∀ x (P x))と書くことにしたい。
{(∀ x)を関数として定義できないか??無理だろう}
では
(∀ (x y) (∨ (P x)(Q y)))
みたいにvarsを書けたほうがいいのでは?
今は
(∀ x (∀ y (∨ (P x)(Q y))))

(x y)にしたとき、bindingの処理がlistになる。
1変数のときは
(∀ x (P x))
と書きたいか?　これは
(∀ (x) (P x))
でいいのではないか。

(x y)のときのrename処理はどうか?

cccccccccccccccccccccccccc cccccccccccccccccccccccccc


steps
1. ⇒, ≡の変形
　{∀,∃,∨,∧,¬}
2. ¬の押し込み
3. literal化{¬削除、+,-導入}
　{∀,∃,∧,∨}
4. ∀xのDVCとskolem関数化。
　　∀変数に変数名を割り当て、scope中の変数を変名する。
　　varsのpathを管理する。
　　∃変数の函数名化と、pathを引数にしたform作成し、scope中の∃変数をformで置換。
  {∧、∨}
5. DeMorganにより∧-∨化する
6. ∧、∨を削除し、clause形式に整理する



xxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxx
無理

macro をインターフェース、計算をfunctionでやるというのはspecial formたとえばsetq などはできるが

論理記号についてはマクロや関数に定義をかえられるが、それ以外のatomicについてはキーとなる記号がないので場合訳の関数が必要になる。
(isatomic E)など

すると、定義にcondを書くしかない。

macroに場合分けを書くか。

マクロfをinterfaceとしてそれに対応する機能をfjと名前をつけてみた。jは虚数単位。
何も解決しない。


macroを繰り返し適用したい。
(⇒ (⇒ p q) (⇒ r s))
を展開したいと思ったとき、macroだけでは一番上の⇒しか展開されない。(たぶん)
そこで⇒jを定義してみたりしたが、展開が無限loopするしかないようだ。

(defmacro ∧ (a b)
  `(cnj ',a ',b)
)

という書き方をするとspecial formがかける。
(defmacro mysetq (a b) `(set ',a ,b))
(defmacro ∧ (a b) `(∧  ,a ,b)) ; dont stop

↓ ' stop the evaluation loop
' を使うのは、引数に渡したS式が全体として式であり、実行する対象ではないことを示す。
しかし、'のせいで表現の再帰的な評価(たとえば(⇒ (⇒ p q) r)で、内側の⇒が評価されない)

(defmacro ∧ (a b) `(list '∧ ',a ',b))


ccccccccccccccccccccccc
propとpred記号をidenticalに定義したら、≡、⇒は再帰的に展開された。

(∀ x e)
(∀ (x y) e)
がこまる。∀の第二引数の評価次に変数を関数とみなしてevalしようとする。
ただのデータだということが伝わらない

これは(let (x y z)...)に似ているのではないか。(x y z)を関数だと解釈しないために何をしているか。

そもそも(∀ (x y) E)を展開するとまた(∀ ...)になるというのがおかしいのかも。

∀∃はうまくいかない

(∀ x (P x))
のidentifyはできるが、(∀ (x y) (Pp x y))はだめ。(x y)をevalしようとしてxが関数解釈されて失敗か。

ちなみに、macroはだめでdefunならうごくとか。





