

これまで
　設計方針
　　当初∧∨は2引数とする。処理が簡単になりそうだったから。
　　変換後の形ではn引数の方が処理も簡単になることに気づく。
　　変更するが、関連する処理は∨∧に関連するコードだけなので、意外と楽。

　この方針変更の動機は、upconjの簡単化につながった。
　　wffのツリーの一枝は、∧、∨にわけられる。
　　最終的に∧→∨→Lの3段の木になってほしい。

　　あるノードの子wffは、まず変換処理を行うと、2段になる。子は∧と∨とLiteral。
　　De Morganの法則は、子の∧(∨のリストで、clause setのリスト)と∨(clause)のリストとliteral(unit clauwe)のリストに対する操作になる。
　　literalをP∨(v P)という1引数のdisjointとみなせるなら(∨はn-引数なのでみなせる)、あるwff木の子は∧のリストと∨のリストの2部分にわけられる。
　　そして、Demorganは∧部分と∨部分の掛け算になるはず。

7月28日(木)
clausefyが動いた。これは、 wffをclause(論理演算子を使わない表記)に変換する。
varsもclauseごとに出現するものを選んで作成する。

あと、kqcファイルを出力するところまで作ったら終わりにしよう。

2022/07/29
wff2kqc で完成。

--------------
記録
6/12から7/29までの作業

自分の老化による能力の低下を認識するため。

問題を正確に理解することに時間がかかる。
その視線がぼやけてしまう時間がある。
ピントがあうと、何をすべきかはわかる。
なかなかむずかしい。

内容

論理式(wff)をclause形式に変形する。
1. ≡と⇒を¬、∨、の式に変換する。(≡と⇒はなくなる)
2. ¬をatomicの直前までもっていく。atomicと¬atomicをliteralと呼ぶ。
2.1  ¬∨(a1,a2,...)　=> ∧(¬a1,¬a2,...)
2.2  ¬∧(a1,a2,...)　=> ∨(¬a1,¬a2,...)
2.3  ¬¬α => α
2.4  ¬((∀ x) α) => ((∃ x) ¬α)
2.5  ¬((∃ x) α) => ((∀ x) ¬α)
3. 変数名
3.1 ((∀ x)α[x]は、新しい変数名zを導入して((∀ z)α[z])とする。
3.2 ((∀ x)((∀ y)((∃ z))α[x y z]))は、新しい関数記号sを導入して ((∀ x')((∀ y')(α[x',y',s(x',y')))) とする。
4. Demorgan
4.1 ∨(∧(a1,a2,...,ak),∧(b1,b2,...,bm),...,∧() => ∧(∨(a1,b1,..),∨(a1,b2,...),...,∨(ak,bm,...),...)
4.2 ∧(∨(a1,a2,...,ak),∨(b1,b2,...,bm),...,∨(...) → ∨(∧(a1,a1,...),∧(a1,b2,...),...,∧(ak,bm,...)...)

5. この段階でwffは次のパターンになっている
　a) ∧(∨(..),∨(...),...)
　b) ∨(...) as ∧(∨(...))
  c) L=+/- P(...) as ∧(∨(L))

6. wffをclauseに変換してkqcファイルに出力する(wff2kqc)
　6.1 wffをコメントとして出力
　6.2 clauseごとに改行。




2022/08/12
最初、CNFへの変換は明確に定義されていると思っていたが、それをアルゴリズムにするとき、それほど詳細ではなかった。

途中で仕様を変更した。
・書きやすさと実装のしやすさを天秤にかけて。
・途中で、役に立てられないと思うようになり、さらなる変更はやめた。
・使うことを考えると、ファイルからファイルへの変換ツールがほしくなった。だんだん意図を書くのがめんどうになってきた。


wffをclause formに変換するツールがあったとして、それがないとうまくいかないような例はまだ扱わない。
そういう例が必要になることはあるのか?




